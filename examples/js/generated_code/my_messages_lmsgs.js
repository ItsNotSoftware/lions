/**
 * @file my_messages_lmsgs.js
 *
 * @brief Implementation of my_messages_lmsgs.js Classes
 * 
 * This file contains the implementation of the message classes generated by the Lions Compiler.
 * 
 * @details
 * This file was generated by the Lions Compiler (https://github.com/ItsNotSoftware/lions) on .
 * Modifying this file manually is not recommended as it may lead to unexpected behavior.
 * 
 * @note
 * Generated files should not be manually edited.
 * 
 * @author Lions Compiler
 */

import { LMsg } from './lions.js';

const msg_id = {
    ACCELEROMETER: 1,
    MICROPHONE: 2,
    PING: 3
};

class AccelerometerMsg {
    constructor(acc_x = 0, acc_y = 0, acc_z = 0) {
        this.acc_x = acc_x;
        this.acc_y = acc_y;
        this.acc_z = acc_z;
    }

    static fromLMsg(msg) {
        const acc_x = new Float32Array(msg.payload.buffer.slice(0, 4))[0];
        const acc_y = new Float32Array(msg.payload.buffer.slice(4, 8))[0];
        const acc_z = new Float32Array(msg.payload.buffer.slice(8, 12))[0];
        return new AccelerometerMsg(acc_x, acc_y, acc_z);
    }

    encode(src, dst, next_hop) {
        const msg = new LMsg(12);

        msg.header.src = src;
        msg.header.dst = dst;
        msg.header.next_hop = next_hop;
        msg.header.msg_id = msg_id.ACCELEROMETER;

        new Float32Array(msg.payload.buffer).set([this.acc_x, this.acc_y, this.acc_z]);

        msg.calculateChecksum();

        return msg;
    }
}

class MicrophoneMsg {
    constructor(sound_level = 0, message = '') {
        this.sound_level = sound_level;
        this.message = message;
    }

    static fromLMsg(msg) {
        const sound_level = new Int16Array(msg.payload.buffer.slice(0, 2))[0];
        const message = new TextDecoder().decode(msg.payload.slice(2, 102));
        return new MicrophoneMsg(sound_level, message);
    }

    encode(src, dst, next_hop) {
        const msg = new LMsg(102);

        msg.header.src = src;
        msg.header.dst = dst;
        msg.header.next_hop = next_hop;
        msg.header.msg_id = msg_id.MICROPHONE;

        new Int16Array(msg.payload.buffer).set([this.sound_level]);
        const encodedMessage = new TextEncoder().encode(this.message);
        msg.payload.set(encodedMessage, 2);

        if (encodedMessage.length < 100) {
            msg.payload[2 + encodedMessage.length] = 0; // Null-terminate string
        }

        msg.calculateChecksum();

        return msg;
    }
}

class PingMsg {
    constructor() {}

    static fromLMsg(msg) {
        return new PingMsg();
    }

    encode(src, dst, next_hop) {
        const msg = new LMsg(0);

        msg.header.src = src;
        msg.header.dst = dst;
        msg.header.next_hop = next_hop;
        msg.header.msg_id = msg_id.PING;

        msg.calculateChecksum();

        return msg;
    }
}

export { AccelerometerMsg, MicrophoneMsg, PingMsg, msg_id };
