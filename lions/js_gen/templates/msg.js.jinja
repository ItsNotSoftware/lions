/**
 * @file {{filename}}_lmsgs.js
 *
 * @brief {{filename}}_lmsgs Classes
 * 
 * This file contains the declaration of the message classes generated by the Lions Compiler.
 * 
 * @details
 * This file was generated by the Lions Compiler (https://github.com/ItsNotSoftware/lions) on {{date}}.
 * Modifying this file manually is not recommended as it may lead to unexpected behavior.
 * 
 * @note
 * Generated files should not be manually edited.
 * 
 * @author Lions Compiler
*/

import { LMsg } from './lions.js';

const msg_id = {
{% for msg in msgs %}    {{msg.name}}: {{msg.id}}{% if not loop.last %},{% endif %}
{% endfor %}};

const msg_period = {
{% for msg in msgs %}    {{msg.name}}: {{msg.period}}{% if not loop.last %},{% endif %} 
{% endfor %}};

{% for msg in msgs %}
class {{msg.name | capitalize}}Msg {
    constructor({% for field in msg.fields %}{{field.name}}{% if not loop.last %}, {% endif %}{% endfor %}) {
{% for field in msg.fields %}        this.{{field.name}} = {{field.name}};
{% endfor %}    }

    static fromLMsg(msg) {
        const dataView = new DataView(msg.payload.buffer); {% for field in msg.fields %}
        {% if field.type == 'string' %}const {{field.name}} = new TextDecoder().decode(msg.payload.slice({{loop.index0}}, {{loop.index0}} + {{field.size}}));
        {% else %}const {{field.name}} = dataView.get{{field.type | capitalize}}({{loop.index0}}, true);  // true for little-endian{% endif %}{% endfor %}

        return new {{msg.name | capitalize}}Msg({% for field in msg.fields %}{{field.name}}{% if not loop.last %}, {% endif %}{% endfor %});
    }

    encode(src, dst, next_hop) {
        const msg = new LMsg({{msg.size}});
        
        msg.header.src = src;
        msg.header.dst = dst;
        msg.header.next_hop = next_hop;
        msg.header.msg_id = msg_id.{{msg.name}};
        
        const dataView = new DataView(msg.payload.buffer); {% for field in msg.fields %}
        {% if field.type == 'string' %}new TextEncoder().encode(this.{{field.name}}).forEach((byte, i) => msg.payload[{{loop.index0}} + i] = byte);
        msg.payload[{{loop.index0}} + {{field.size}}] = 0;
        {% else %}dataView.set{{field.type | capitalize}}({{loop.index0}}, this.{{field.name}}, true);  // true for little-endian{% endif %}{% endfor %}

        msg.calculateChecksum();

        return msg;
    }
}
{% endfor %}

export { msg_id, msg_period, {% for msg in msgs %}{{msg.name | capitalize}}Msg{% if not loop.last %}, {% endif %}{% endfor %} };