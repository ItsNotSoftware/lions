/**
 * @file single.cpp
 *
 * @brief Implementation of single.hpp Classes
 * 
 * This file contains the implementation of the message classes generated by the Lions Compiler.
 * 
 * @details
 * This file was generated by the Lions Compiler (https://github.com/ItsNotSoftware/lions) on .
 * Modifying this file manually is not recommended as it may lead to unexpected behavior.
 * 
 * @note
 * Generated files should not be manually edited.
 * 
 * @author Lions Compiler
*/

#include "single.hpp"

#include <algorithm>
#include <utility>

namespace lions {
 
AccelerometerMsg::AccelerometerMsg(const uint8_t src, const uint8_t dst, const uint8_t next_hop, const float acc_x, const float acc_y, const float acc_z)
    : header{src, dst, next_hop, static_cast<uint8_t>(msg_id::ACCELEROMETER)}
    , acc_x(acc_x), acc_y(acc_y), acc_z(acc_z){}

AccelerometerMsg::AccelerometerMsg(const LMsg &msg) { 
    header = std::move(msg.header);
     
    acc_x = *reinterpret_cast<const float*>(&msg.payload[0]);   
    acc_y = *reinterpret_cast<const float*>(&msg.payload[4]);   
    acc_z = *reinterpret_cast<const float*>(&msg.payload[8]);  
}

LMsg AccelerometerMsg::encode(const uint8_t src, const uint8_t dst, const uint8_t next_hop) { 
    LMsg msg(12);

    msg.header.src = src;
    msg.header.dst = dst;
    msg.header.next_hop = next_hop;
    msg.header.msg_id = static_cast<uint8_t>(msg_id::ACCELEROMETER);

    *reinterpret_cast<float*>(&msg.payload[0]) = acc_x;
    *reinterpret_cast<float*>(&msg.payload[4]) = acc_y;
    *reinterpret_cast<float*>(&msg.payload[8]) = acc_z;
    msg.calculate_checksum();
    
    return msg;
}

}  // namespace lions