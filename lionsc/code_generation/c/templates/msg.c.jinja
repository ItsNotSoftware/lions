
/**
 * @file my_messages_lmsg.c
 *
 * @brief Implementation of my_messages_lmsg.h Classes
 *
 * This file contains the implementation of the message classes generated by the
 * Lions Compiler.
 *
 * @details
 * This file was generated by the Lions Compiler
 * (https://github.com/ItsNotSoftware/lions) on {{ date }}. Modifying this file manually
 * is not recommended as it may lead to unexpected behavior.
 *
 * @note
 * Generated files should not be manually edited.
 *
 * @author Lions Compiler
 */

#include "my_messages_lmsg.h"
#include <string.h>

{% for msg in msgs %}
{{ msg.name | capitalize }}Msg {{ msg.name | capitalize }}Msg_create({% for field in msg.fields %}{{ field.type }} {{ field.name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
    {{ msg.name | capitalize }}Msg msg = {0};
    {% for field in msg.fields %} {% if field.type == 'char*' %}
    strncpy(msg.{{ field.name }}, {{ field.name }}, sizeof(msg.{{ field.name }}) - 1);
    msg.{{ field.name }}[sizeof(msg.{{ field.name }}) - 1] = '\0'; // ensure null termination {% else %}
    msg.{{ field.name }} = {{ field.name }}; {% endif %} {% endfor %}

    return msg;
}

{{ msg.name | capitalize }}Msg {{ msg.name | capitalize }}Msg_decode(const LMsg *lmsg) {
    {{ msg.name | capitalize }}Msg msg = {0};

    msg.header = lmsg->header;
    {% for field in msg.fields %}{% if field.type == 'char*' %}
    strncpy(msg.{{ field.name }}, (char*)&lmsg->payload[{{ field.start }}], sizeof(msg.{{ field.name }}) - 1);
    msg.{{ field.name }}[sizeof(msg.{{ field.name }}) - 1] = '\0'; // ensure null termination
    {% else %}memcpy(&msg.{{ field.name }}, &lmsg->payload[{{ field.start }}], sizeof({{ field.type }}));{% endif %} {% endfor %}
    return msg;
}

LMsg {{ msg.name | capitalize }}Msg_encode(const {{ msg.name | capitalize }}Msg *msg, uint8_t src, uint8_t dst, uint8_t next_hop) {
    LMsg lmsg = {0};

    lmsg.payload_size = {{ msg.payload_size }};
    lmsg.header.src = src;
    lmsg.header.dst = dst;
    lmsg.header.next_hop = next_hop;
    lmsg.header.msg_id = MSG_ID_{{ msg.name | upper }};
    {% for field in msg.fields %} {% if field.type == 'char*' %} strncpy((char*)&lmsg->payload[{{ field.start }}], msg->{{ field.name }}, sizeof(msg->{{ field.name }}) - 1);
    lmsg.payload[{{ field.start }} + sizeof(msg->{{ field.name }}) - 1] = '\0'; // ensure null termination
    {% else %}
    memcpy(&lmsg.payload[{{ field.start }}], &msg->{{ field.name }}, sizeof({{ field.type }})); {% endif %} {% endfor %}
    LMsg_calculate_checksum(&lmsg);

    return lmsg;
}
{% endfor %}
